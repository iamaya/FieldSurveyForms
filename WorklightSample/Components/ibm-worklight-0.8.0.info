{"Name":"IBM MobileFirst SDK","Id":1053,"Alias":"ibm-worklight","Description":"## IBM Worklight Foundation SDK\n\nThe IBM Worklight Foundation SDK enables C# developers to build rich native enterprise grade mobile apps for iOS, android and Windows devices by using IBM Worklight server\n\n#### Key Highlights\n* Single, secure point of integration, management, deployment supporting the full mobile app lifecycle\n* Access your enterprise backend using Worklight Adapters\n* Enterprise grade security for your mobile applications  \n* Application management and version control\n* Leverage rich analytics support of Worklight\n* Simplified push notification management service\n* Use your own strongly-typed C# objects and async/await patterns.\n* Use a unified C#API  for iOS and Android.\n* **Do it all using C#.**\n\n###Dive In\n\nA unified API is provided for iOS and Android. You can write most of the IBM Worklight related code will reside in a common shared project to be used in the Android and iOS project. You can write all the asynchronous code using async/await and event listeners to make your app responsive.\n\nThe following code is a simplified subset of the code located in the samples. The sample walks through calling into an IBM Worklight adapter returns a feed of news articles and is formatted for pretty printing in common code.\n\nIn the Android Activity instantiate the Android specific WorklightClient\n\n```csharp\npublic class MainActivity : Activity\n{\n\tIWorklightClient client = Worklight.Xamarin.Android.WorklightClient.CreateInstance (this);\n}\n```\n\nIn the iOS UIViewController instantiate the iOS specific WorklightClient\n\n```csharp\npublic partial class Xtest_iOSViewController : UIViewController\n{\n\tpublic override void ViewDidLoad ()\n\t{\n\t\tbase.ViewDidLoad ();\n\t\tWorklightUtils wlUtils = new WorklightUtils ( Worklight.Xamarin.iOS.WorklightClient.CreateInstance ());\n\t}\n}\n```\n\nAfter this you can use the instance of IWorklightClient to write platform agnostic common code . \nYou first connect to the Worklight server and register a Challenge handler for authentication. Along the way we can write to the local logging as well as the server based Analytics logging.\n\n```csharp\n//all this is common code\npublic async Task\u003cWorklightResponse\u003e Connect()\r\n{\n\tstring appRealm = \"SampleAppRealm\";\n\tChallengeHandler customCH = new CustomChallengeHandler (appRealm);\n\tclient.RegisterChallengeHandler(customCH);\n\tWorklightResponse task = await client.Connect ();\n\t//lets log to the local client (not server)\n\tclient.Logger(\"Xamarin\").Trace (\"connection\");\n\t//write to the server the connection status\n\tclient.Analytics.Log (\"Connect response : \" + task.Success);\n\treturn task;\n}\n```\n\nThen invoke a procedure \n\n```csharp\n//Common code\nWorklightProcedureInvocationData invocationData = new WorklightProcedureInvocationData(\"SampleHTTPAdapter\", \"getStories\", new object[] {\"technology\"});\nWorklightResponse task = await client.InvokeProcedure(invocationData);\nStringBuilder retval = new StringBuilder();\nif (task.Success)\n{\n\tJsonArray jsonArray = (JsonArray)task.ResponseJSON[\"rss\"][\"channel\"][\"item\"];\n\tforeach(JsonObject title in jsonArray)\n\t{\n\t\tSystem.Json.JsonValue titleString ;\n\t\ttitle.TryGetValue(\"title\",out titleString);\n\t\tretval.Append(titleString.ToString());\n\t\tretval.AppendLine();\n\t}\n}\n```\n\nPlease see the sample for more details. \n\n","Version":"0.8.0","Summary":"Integrate your Xamarin apps with IBM Worklight.","QuickStart":"## More Information\n\n1. [IBM Worklight Foundation home page](http://www.ibm.com/developerworks/mobile/worklight/index.html)\r\n2. [IBM Worklight Foundation Knowledge Center](http://www-01.ibm.com/support/knowledgecenter/SSZH4A_6.2.0/)\r\n3.  The C# API guide is bundled inside the component\r\n4.  The sample Xamarin solution for Android and iOS is bundled in the component\r\n\r\n## The IBM Worklight Add-in for Xamarin Studio\n\nA Add-in is provided for the Xamarin Studio for IBM Worklight integration. This add-in prepares the development environment by\n\n 1.  Creating the WL Server instance for the installation\r\n 2.  Creating a Worklight project for the Xamarin solution that is active\r\n 3.  Creating a Android Native App configuration and a iOS App configuration in the project\r\n 4.  You can Start/stop the server as well as open the Worklight console in the browser\n\n## Pre-requisites for a New Solution\n\n 1.  You need an instance of the IBM Worklight Server on the development machine.  Install Worklight CLI (Command line Interface) from the [ IBM Worklight download page](http://www.ibm.com/developerworks/mobile/worklight/download/cli.html)\n 2.  Create a new Xamarin Solution\n 3.  Add a Android and/or iOS Project in the solution\n 4.  Add this Component to the project \r\n 5.  Install the IBM Worklight Add-in \r\n  1.  Right click on the IBM Worklight Component and click on Open containing folder\r\n  2.  Add the Add-in (.mpack file) via the Add-in panel from the component\\addin folder\r\n 6. Click on Menu\u003eTools\u003eIBM Worklight\u003eStart Server - this creates the Worklight setup\r\n 7. The Worklight SDK needs a property file that contains information on how to connect to the Worklight Server. This information is pre populated (like the IP address of the server, application name etc) in the Worklight project the add-in created. Add them to the Xamarin Application projects.\r\n  1. Android: Add  \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e\\wlclient.properties to the Xamarin Android \"Assets\" folder and set the build action to \u0027AndroidAsset\u0027. (e.g: \\Xtest\\worklight\\Xtest\\apps\\androidXtest\\wlclient.properties)\r\n  2. iOS: Add \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\iOS\u003c SolutionName\u003e\\worklight.plist to the Xamarin iOS \"resources\" folder and set the build action to \u0027bundleResource\u0027 (e.g: \\Xtest\\worklight\\Xtest\\apps\\iOSXtest\\worklight.plist)\n\n**Note:** \n\nWhen you add the Worklight Xamarin Component to your project, the following DLLs get referenced in the project\n\n1. Android project: add  Worklight.Android.dll and Worklight.Xamarin.Android.dll\n2.  iOS project: add Worklight.iOS.dll and Worklight.Xamarin.iOS.dll\n\n## Sample Application Quickstart\n\n###Pre-requisites\n \r\n\r\n1.  You need a instance of the IBM Worklight Server on the development machine.  Install Worklight CLI (Command line Interface) from the [ IBM Worklight download page](http://www.ibm.com/developerworks/mobile/worklight/download/cli.html)\r\n2.  Install the add-in\r\n\r\n###Open the samples in Xamarin Studio:\r\n\r\n1. Open Xamarin Studio.\r\n2. Select \"File \u003e Open\"\r\n3. Browse to the location of your unzipped \"Xamarin Worklight component\" directory and open the \"/samples\" folder\r\n4. Select the \"Xtest.sln\" file and click \"Open\"\r\n\r\n###Prepare the Worklight Server\r\n\r\n1.  From the Add-in - click on \"Start Server\" - this will run for a while the first time\r\n2.  Click on \"Open Console\" and login using username: admin and password: admin\r\n3.  You should see the 2 apps and a SampleHTTPAdapter in the console\r\n4.  Run the app in the simulator/real device\n\n\n###Configure and run the iOS Sample\n\n1. Right-click the \"Xtest.iOS\" project and select \"Set As Startup Project\"\n2. Expand the \"Xtest.iOS\" project and double-click the file \"worklight.plist\" to open it in the property value editor.\n3. In the property value editor find the entry for \"host\" and update its value to the \"Server host\" value.\n4. Run the sample project by clicking Xamarin menu item \"Run \u003e Start Debugging\"\r\n\r\n##Additional Info\n\n###Known Issues\n\n Add-in\n \r\n 1. Depending on the developer environment, some times you can get a \"Error: Process Timed out\" message when you Start or Stop the server from the add-in.  to check if the server is running\r\n  1. Open a command prompt or shell window\r\n  2. Type ``` wl status ```\r\n  3. You should see ``` Server worklight is running. Server worklight is listening on port 10080.```\n\nWorklight CLI\n\n1. On startup of the CLI you may get a error \"Cannot find module generator-worklight.\". You should upgrade the worklight CLI with teh patch or install the latest version of the CLI. [See Stackoverflow](http://stackoverflow.com/questions/26136870/is-worklight-cli-installer-broken) for a detailed discussion.\n\n###Appendix I\n\nSample Commands for  Worklight CLI.\n\n    wl create-server\n    wl create \u003csolutionName\u003e\nFrom within the  \u0026lt;solutionName\u0026gt;  directory\r\n\n    wl add api \u003csolutionName\u003eAndroid -e android\n    wl add api \u003csolutionName\u003eiOS -e ios\n    wl start\n    wl build\n    wl deploy\n    wl stop\n    wl status\n\nFor a full list of the CLI commands see [the reference documentation](http://www-01.ibm.com/support/knowledgecenter/SSZH4A_6.2.0/com.ibm.worklight.dev.doc/dev/r_wl_cli_commands.html)\n\n###Appendix II\n\nSetting up a Xamarin development environment with Worklight Studio.\n\n 1. Install Worklight studio from the [IBM website](http://www.ibm.com/developerworks/mobile/worklight/download/studio.html)\n 2. Go to the \"Servers\" tab and Start the server\n 3. File\u003eNew\u003eWorklight Project . Project Template = Android;\n 4. File\u003eNew\u003eWorklight Native API; Environment = iOS\n 5. Right click on the App \u003eRun As\u003e deploy Native API\n 6. Copy the wlclient.properties and worklight.plist\n\n","Hash":"b73fa9e90e8ac0f1edea279107f596d1","TargetPlatforms":["ios","android"],"TrialHash":null}